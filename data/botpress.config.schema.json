{
  "type": "object",
  "properties": {
    "version": {
      "type": "string"
    },
    "appSecret": {
      "type": "string"
    },
    "httpServer": {
      "type": "object",
      "properties": {
        "host": {
          "default": "localhost",
          "type": "string"
        },
        "port": {
          "default": 3000,
          "type": "number"
        },
        "proxy": {
          "description": "There are two external URL that Botpress calls: https://license.botpress.io and https://duckling.botpress.io\nIf you are behind a corporare proxy, you can configure it below.\nIt is also possible to self-host Duckling, please check the documentation",
          "type": "string"
        },
        "backlog": {
          "default": 0,
          "type": "number"
        },
        "bodyLimit": {
          "default": "100kb",
          "type": [
            "string",
            "number"
          ]
        },
        "cors": {
          "type": "object",
          "properties": {
            "enabled": {
              "default": true,
              "type": "boolean"
            },
            "origin": {
              "type": "string"
            }
          }
        },
        "externalUrl": {
          "description": "Represents the complete base URL exposed externally by your bot. This is useful if you configure the bot\nlocally and use NGINX as a reverse proxy to handle HTTPS. It should include the protocol and no trailing slash.\nIf unset, it will be constructed from the real host/port",
          "type": "string"
        },
        "session": {
          "type": "object",
          "properties": {
            "enabled": {
              "default": false,
              "type": "boolean"
            },
            "maxAge": {
              "description": "Time from Date.now() for expiry\nDefaults to one hour",
              "default": "1h",
              "type": "string"
            }
          },
          "required": [
            "enabled",
            "maxAge"
          ]
        }
      },
      "required": [
        "backlog",
        "bodyLimit",
        "cors",
        "host",
        "port",
        "session"
      ]
    },
    "dialog": {
      "$ref": "#/definitions/DialogConfig"
    },
    "logs": {
      "$ref": "#/definitions/LogsConfig"
    },
    "modules": {
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "location": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "enabled",
          "location"
        ]
      }
    },
    "pro": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "When pro features are enabled, the license key must be provided",
          "default": false,
          "type": "boolean"
        },
        "licenseKey": {
          "description": "The license key for the server.  Optionally you can use the BP_LICENSE_KEY env variable.\nYou can purchase a license on https://botpress.io\nFor usage with Botpress Pro/Enterprise.",
          "default": "paste your license key here",
          "type": "string"
        },
        "auth": {
          "type": "object",
          "properties": {
            "strategy": {
              "$ref": "#/definitions/AuthStrategy",
              "description": "Defines which authentication strategy to use. When the strategy is changed, accounts created before may no longer log in.",
              "default": "basic"
            },
            "options": {
              "description": "Defines custom options based on the chosen authentication strategy",
              "anyOf": [
                {
                  "$ref": "#/definitions/AuthStrategySaml"
                },
                {
                  "$ref": "#/definitions/AuthStrategyLdap"
                }
              ]
            },
            "fieldMapping": {
              "$ref": "#/definitions/FieldMapping",
              "description": "Maps the values returned by your provider to Botpress user parameters."
            },
            "allowSelfSignup": {
              "description": "When enabled, users are able to register new accounts by themselves. For example, if you use the SAML strategy and this is enabled,\nany user able to sign in using your SAML provider will create automatically an account on Botpress.",
              "default": false,
              "type": "boolean"
            }
          },
          "required": [
            "allowSelfSignup",
            "fieldMapping",
            "options",
            "strategy"
          ]
        },
        "monitoring": {
          "$ref": "#/definitions/MonitoringConfig"
        },
        "alerting": {
          "$ref": "#/definitions/AlertingConfig",
          "description": "The alert service is an extension of the monitoring service. The monitoring collects data, while the alert service\nanalyzes them and opens an incident when configured threshold are met."
        },
        "externalAuth": {
          "$ref": "#/definitions/ExternalAuthConfig",
          "description": "External Authentication makes it possible to authenticate end-users (chat users) from an other system\nby using JWT tokens.\n\nIn addition to authenticate the users, the JWT token can also contain arbitrary additional\ndata about the user that you would like to make Botpress aware of.\n\nThe identity of the user will be checked for every incoming message and the additional data in the JWT token\nwill be available in `event.credentials`."
        }
      },
      "required": [
        "alerting",
        "auth",
        "enabled",
        "licenseKey",
        "monitoring"
      ]
    },
    "superAdmins": {
      "description": "An array of e-mails of users which will have root access to Botpress (manage users, server settings)",
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "sendUsageStats": {
      "description": "When enabled, Botpress collects anonymous data about the bot's usage",
      "default": true,
      "type": "boolean"
    },
    "dataRetention": {
      "$ref": "#/definitions/DataRetentionConfig",
      "description": "When this feature is enabled, fields saved as user attributes will be automatically erased when they expires. The timer is reset each time the value is modified\nSetting a policy called \"email\": \"30d\" means that once an email is set, it will be removed in 30 days, unless it is changed in that timespan"
    },
    "botCategories": {
      "description": "An array of categories in which a bot can be created in your botpress installation. Good for platform use-cases.",
      "default": [],
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "allowServerReboot": {
      "description": "When this option is enabled, Super Admins are able to reboot the Botpress Server via the Admin UI\nWe recommend disabling this in a production environment, and if you use a process management tool like PM2",
      "default": true,
      "type": "boolean"
    }
  },
  "required": [
    "allowServerReboot",
    "appSecret",
    "botCategories",
    "dialog",
    "httpServer",
    "logs",
    "modules",
    "pro",
    "sendUsageStats",
    "superAdmins",
    "version"
  ],
  "definitions": {
    "DialogConfig": {
      "type": "object",
      "properties": {
        "janitorInterval": {
          "description": "Interval between executions of the janitor to check for stale sessions",
          "default": "10s",
          "type": "string"
        },
        "timeoutInterval": {
          "description": "The delay before a stale session will get sweeped by the janitor",
          "default": "2m",
          "type": "string"
        },
        "sessionTimeoutInterval": {
          "description": "The delay before we consider that it is a new interaction (ex: different subject). We keep the user's last messages\nand variables in the session context to customize interactions.",
          "default": "30m",
          "type": "string"
        }
      },
      "required": [
        "janitorInterval",
        "sessionTimeoutInterval",
        "timeoutInterval"
      ]
    },
    "LogsConfig": {
      "type": "object",
      "properties": {
        "dbOutput": {
          "description": "The database output will not record Debug logs.",
          "type": "object",
          "properties": {
            "expiration": {
              "description": "Logs will be kept for this amount of time in the database",
              "default": "2 weeks",
              "type": "string"
            },
            "janitorInterval": {
              "default": "30s",
              "type": "string"
            }
          },
          "required": [
            "expiration",
            "janitorInterval"
          ]
        },
        "fileOutput": {
          "description": "The file output records everything that is displayed in the console logs.",
          "type": "object",
          "properties": {
            "enabled": {
              "description": "Enable or disable the output of logs to the file system. A new file is created each day",
              "default": false,
              "type": "boolean"
            },
            "folder": {
              "description": "The path (relative or absolute) to the logs folder.",
              "default": "./",
              "type": "string"
            },
            "maxFileSize": {
              "description": "The maximum file size that the log can reach before a new one is started (size in kb)",
              "default": 10000,
              "type": "number"
            }
          },
          "required": [
            "enabled",
            "folder",
            "maxFileSize"
          ]
        }
      },
      "required": [
        "dbOutput",
        "fileOutput"
      ]
    },
    "AuthStrategy": {
      "enum": [
        "basic",
        "ldap",
        "saml"
      ],
      "type": "string"
    },
    "AuthStrategySaml": {
      "type": "object",
      "properties": {
        "authEndpoint": {
          "description": "This is the page of the external SAML IdP where users will login",
          "type": "string"
        },
        "callbackUrl": {
          "description": "The callback url is called by the SAML provider with the payload. The path provided here is absolute.",
          "default": "http://localhost:3000/admin/login-callback",
          "type": "string"
        },
        "path": {
          "description": "The callback url is called by the SAML provider with the payload. The path provided here is relative to ${externalUrl}/admin\nFor example, if you use the default callback, it will be available at http://localhost:3000/admin/login-callback",
          "default": "/login-callback",
          "type": "string"
        },
        "issuer": {
          "description": "The `entityID` you provided the IdP",
          "default": "botpress-server-saml",
          "type": "string"
        },
        "certificate": {
          "description": "The public PEM certificate provided by the SAML IdP, starting with \"-----BEGIN CERTIFICATE-----\"\nThe string should be provided as one line (use \\n for new lines)",
          "default": "<paste PEM certificate>",
          "type": "string"
        },
        "acceptedClockSkewMs": {
          "description": "Change if there is a significant time difference between this server and your identity provider",
          "default": 5000,
          "type": "number"
        }
      },
      "required": [
        "acceptedClockSkewMs",
        "authEndpoint",
        "callbackUrl",
        "certificate",
        "issuer"
      ]
    },
    "AuthStrategyLdap": {
      "type": "object",
      "properties": {
        "serverUrl": {
          "type": "string"
        },
        "bindDn": {
          "type": "string"
        },
        "bindCredentials": {
          "type": "string"
        },
        "searchBase": {
          "type": "string"
        },
        "searchFilter": {
          "type": "string"
        },
        "timeout": {
          "type": "number"
        },
        "tlsEnabled": {
          "type": "boolean"
        },
        "certificates": {
          "description": "Path to certificates on the file system",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "bindCredentials",
        "bindDn",
        "certificates",
        "searchBase",
        "searchFilter",
        "serverUrl",
        "timeout",
        "tlsEnabled"
      ]
    },
    "FieldMapping": {
      "type": "object"
    },
    "MonitoringConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "To enable server monitoring, you need to enable the Pro version and configure your Redis server.",
          "default": false,
          "type": "boolean"
        },
        "collectionInterval": {
          "description": "The interval between data collection of metrics and usage. The lower the value brings more details,\nbut comes at the cost of more storage required & processing time when viewing data.",
          "default": "10s",
          "type": "string"
        },
        "retentionPeriod": {
          "description": "Data older than this will be cleared periodically.",
          "default": "10d",
          "type": "string"
        },
        "janitorInterval": {
          "description": "The delay between execution of the janitor which removes statistics outside of the previously defined period",
          "default": "15m",
          "type": "string"
        }
      },
      "required": [
        "collectionInterval",
        "enabled",
        "janitorInterval",
        "retentionPeriod"
      ]
    },
    "AlertingConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "To enable the alerting service, you need to enable the monitoring first.",
          "default": false,
          "type": "boolean"
        },
        "watcherInterval": {
          "description": "Interval between each executions of the rule checker",
          "default": "10s",
          "type": "string"
        },
        "retentionPeriod": {
          "description": "The duration for which resolved incidents will be kept",
          "default": "10d",
          "type": "string"
        },
        "janitorInterval": {
          "description": "Delay between the execution of the janitor which removes resolved incidents.",
          "default": "15m",
          "type": "string"
        },
        "rules": {
          "description": "The list of rules which triggers an incident. When triggered, the OnIncidentChangedStatus hook\nis called with the incident.",
          "type": "array",
          "items": {}
        }
      },
      "required": [
        "enabled",
        "janitorInterval",
        "retentionPeriod",
        "rules",
        "watcherInterval"
      ]
    },
    "ExternalAuthConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Set to true to enable external authentification",
          "default": false,
          "type": "boolean"
        },
        "audience": {
          "description": "If provided, the audience of the token will be checked against the provided value(s).\n[Click here](https://www.npmjs.com/package/jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback) to learn more.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "issuer": {
          "description": "If provided, the issuer of the token will be checked against the provided value(s).\n[Click here](https://www.npmjs.com/package/jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback) to learn more.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "algorithm": {
          "description": "The algorithm used to sign and validate the JWT tokens.",
          "default": "HS256",
          "type": "string"
        },
        "publicKey": {
          "description": "You need to provide the public key used to verify the JWT token authenticity.\nIf not provided, the public key will be read from `data/global/end_users_auth.key`",
          "default": "insert key here",
          "type": "string"
        }
      },
      "required": [
        "algorithm",
        "enabled"
      ]
    },
    "DataRetentionConfig": {
      "type": "object",
      "properties": {
        "janitorInterval": {
          "description": "The janitor will check for expired fields at the set interval (second, minute, hour, day)",
          "default": "10m",
          "type": "string"
        },
        "policies": {
          "default": {},
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "janitorInterval",
        "policies"
      ]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}

